% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-sim.R
\name{xy_sim}
\alias{xy_sim}
\alias{print.xy_sim}
\alias{coef.xy_sim}
\alias{plot.xy_sim}
\alias{transform.xy_sim}
\alias{formula.xy_sim}
\title{Methods of the class \code{\link[=Xy]{xy_sim}}}
\usage{
\method{print}{xy_sim}(x, ...)

\method{coef}{xy_sim}(object, ...)

\method{plot}{xy_sim}(x, ...)

\method{transform}{xy_sim}(`_data`, ...)

\method{formula}{xy_sim}(x, ...)
}
\arguments{
\item{x}{an object of class \code{\link[=Xy]{xy_sim}}}

\item{...}{additional parameters}

\item{object}{an object of class \code{\link[=Xy]{xy_sim}}}

\item{_data}{an object of class \code{\link[=Xy]{xy_sim}}}
}
\description{
Methods of the class \code{\link[=Xy]{xy_sim}}
}
\details{
With the help of these methods you can further manipulate a cooked
simulation.
\itemize{
\item \code{print.xy_sim()}: Gives you an overview of the simulation
\item \code{coef.xy_sim()}: Extracts the beta coeffecients of the simulation from
\eqn{y = X\beta + e}
\item \code{plot.xy_sim()}: Will plot the true effects of the simulation, e.g. X vs y
\item \code{transform.xy_sim()}: Will return the adjusted simulated data, i.e. it will
apply all nonlinear transformations to the raw simulated
effects and multiply the X by its beta coefficient.
This function is mostly used internally, however,
exposed to the user as it could be needed in edge
cases.
\item \code{formula.xy_sim()}: Will return a formula object which can be forwarded
to the machine learning algorithm. Note: Uninformative
features are added as well.
}
}
\examples{
# create a simulation
linear_sim <- Xy() \%>\%
  add_linear(p = 5) \%>\%
  simulate(n = 100)

# print the simulation
simulation_info <- linear_sim \%>\% print()

# get the coefficients of the features
simulation_coefs <- linear_sim \%>\% coef()

# plot the underlying true effect of X
simulation_plot <- linear_sim \%>\% plot()

# transform the data of the simulation such that the features are transformed
# e.g. nonlinear features are scaled by their functions.
transformed_simulation <- linear_sim \%>\% transform()

# fetch the formula
eqn <- linear_sim \%>\% formula()
}
